{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/heredom/source/css/component.css","path":"css/component.css","modified":0,"renderable":1},{"_id":"themes/heredom/source/css/icons.css","path":"css/icons.css","modified":0,"renderable":1},{"_id":"themes/heredom/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/heredom/source/js/classie.js","path":"js/classie.js","modified":0,"renderable":1},{"_id":"themes/heredom/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/heredom/source/js/modernizr.custom.js","path":"js/modernizr.custom.js","modified":0,"renderable":1},{"_id":"themes/heredom/source/js/mlpushmenu.js","path":"js/mlpushmenu.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/heredom/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1486955407757},{"_id":"themes/heredom/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1486955407760},{"_id":"themes/heredom/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1486955407764},{"_id":"themes/heredom/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1486955407767},{"_id":"themes/heredom/_config.yml","hash":"28c40e5be5ea19059da37bd2a2847f3e1c0b812d","modified":1487002457000},{"_id":"themes/heredom/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1486955407923},{"_id":"source/_posts/my-new-post.md","hash":"0c993248b594ea11733966b09e45907528f63075","modified":1487008382000},{"_id":"source/_posts/Markdown常用语法.md","hash":"36c984248b250158e28b93af3ae283340504705a","modified":1487035631000},{"_id":"source/_posts/test.md","hash":"f92345eb0f587c09a30f25eb25496e91f60dc5ba","modified":1487009829000},{"_id":"source/_posts/hello-world.md","hash":"e8c41653682f44c6cf221cd1b55320563a7316f0","modified":1487008456000},{"_id":"source/_posts/test2.md","hash":"8bb8b3997dc99038b242706a76eea20b7b3dda19","modified":1487008221750},{"_id":"themes/heredom/layout/index.ejs","hash":"db09799ba48a0231b5b0354028bca9ee7155bd7a","modified":1486990111000},{"_id":"themes/heredom/layout/post.ejs","hash":"c1fe38aba639c318ba79eecab914c18c8272c818","modified":1487011377000},{"_id":"themes/heredom/layout/page.ejs","hash":"c1fe38aba639c318ba79eecab914c18c8272c818","modified":1486990951000},{"_id":"themes/heredom/layout/layout.ejs","hash":"23ec537091de29c793d20f8ee641e78fff8d04a7","modified":1487042405000},{"_id":"themes/heredom/layout/_partial/footer.ejs","hash":"ad455b98f8f9d39e29f8c4da2462c144e428385c","modified":1486994596000},{"_id":"themes/heredom/layout/_partial/header.ejs","hash":"45ccb3ba15593a92031595fe12ac87e679378053","modified":1486959429000},{"_id":"themes/heredom/layout/_partial/head.ejs","hash":"714ac5b14e40f7acbafc51d3e95c675181d9131e","modified":1487056772996},{"_id":"themes/heredom/layout/_partial/index.ejs","hash":"5532dbf48db2c5f0476340983f06ee187e781604","modified":1487012039588},{"_id":"themes/heredom/layout/_partial/post.ejs","hash":"c87f960add8da4b8145ad46009c3ac4afa16c328","modified":1487011200000},{"_id":"themes/heredom/source/css/component.css","hash":"de4304714fa6cd5ffccbe03d22087dc0ec13c448","modified":1487050808000},{"_id":"themes/heredom/source/css/icons.css","hash":"12039867d89eb27c5236cfa866d46005067bab3a","modified":1376389826000},{"_id":"themes/heredom/source/css/normalize.css","hash":"a0ff1e2feee0b1bb7e54a88fd6367ba3e7435aaf","modified":1373314200000},{"_id":"public/2016/06/12/test2/index.html","hash":"baa6e4a722e60fd629581274d042b13c5b6d1e53","modified":1487058436692},{"_id":"public/2016/06/06/hello-world/index.html","hash":"065984a1683b16a5acc15d9385306bb90dbb501e","modified":1487058436692},{"_id":"public/2016/06/06/my-new-post/index.html","hash":"2024a35c229b3c84245b0080346f57ca98985beb","modified":1487058436693},{"_id":"public/tags/web前端/index.html","hash":"39a2a13eb45ebd38b2b956f915895a712a6e9964","modified":1487058436694},{"_id":"public/tags/生活/index.html","hash":"40a7ff21a1790c10d1f6513eb2a7c9929f815533","modified":1487058436694},{"_id":"public/tags/随笔/index.html","hash":"3fe98b7a467e508937303fedeff5694fe7361bb3","modified":1487058436695},{"_id":"public/index.html","hash":"ca35a5678473b084acb7c751a0c2d90357a4a7c2","modified":1487058436694},{"_id":"public/archives/index.html","hash":"ca35a5678473b084acb7c751a0c2d90357a4a7c2","modified":1487058436693},{"_id":"public/archives/2016/index.html","hash":"ca35a5678473b084acb7c751a0c2d90357a4a7c2","modified":1487058436694},{"_id":"public/archives/2016/06/index.html","hash":"99b9e78d90488d6517890f800e28b5942f3a3d41","modified":1487058436694},{"_id":"public/2016/06/12/test/index.html","hash":"0056c994f9f59317b41cb6afc289d0621eee2605","modified":1487058436692},{"_id":"public/2017/02/14/Markdown常用语法/index.html","hash":"9fbc8e9a60a3d4de024b057500ca42e85d1df9d8","modified":1487012119420},{"_id":"public/archives/2017/index.html","hash":"00beb6087e16e9c29642b4212fcff47fd3fe1b3e","modified":1487012119421},{"_id":"public/archives/2017/02/index.html","hash":"00beb6087e16e9c29642b4212fcff47fd3fe1b3e","modified":1487012119421},{"_id":"public/css/icons.css","hash":"12039867d89eb27c5236cfa866d46005067bab3a","modified":1487011782360},{"_id":"public/css/normalize.css","hash":"a0ff1e2feee0b1bb7e54a88fd6367ba3e7435aaf","modified":1487011782360},{"_id":"public/css/component.css","hash":"de4304714fa6cd5ffccbe03d22087dc0ec13c448","modified":1487058436698},{"_id":"themes/heredom/layout/_partial/after_all.ejs","hash":"096477f209ec5b388aa7f194e147dc3db6e5464a","modified":1487045130000},{"_id":"themes/heredom/source/js/classie.js","hash":"782b9564f015a2ec7bdf9c89e238fab9b44bd587","modified":1367553744000},{"_id":"themes/heredom/source/js/main.js","hash":"5c68257b58f2a6a06d86ef260cf82b1dfc6f7fa6","modified":1487045065000},{"_id":"themes/heredom/source/js/modernizr.custom.js","hash":"bc9582612f11bf96bc56f75347cf54138339778a","modified":1376392986000},{"_id":"themes/heredom/source/js/mlpushmenu.js","hash":"0fbf81ad870e32fa04dbe6976e3a8009add13182","modified":1486911101791},{"_id":"public/2016/05/06/Markdown常用语法/index.html","hash":"50e65d193c4d7753ba8b083119d15224ad5f5e97","modified":1487058436693},{"_id":"public/archives/2016/05/index.html","hash":"8feaa94a351a7240b95bfd1e906f2fb8a2d5b841","modified":1487058436694},{"_id":"public/js/main.js","hash":"5c68257b58f2a6a06d86ef260cf82b1dfc6f7fa6","modified":1487045103755},{"_id":"public/js/modernizr.custom.js","hash":"bc9582612f11bf96bc56f75347cf54138339778a","modified":1487045103755},{"_id":"public/js/mlpushmenu.js","hash":"0fbf81ad870e32fa04dbe6976e3a8009add13182","modified":1487045103755},{"_id":"public/js/classie.js","hash":"782b9564f015a2ec7bdf9c89e238fab9b44bd587","modified":1487045103755}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2016-06-06T08:59:19.000Z","_content":"\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-06-06 16:59:19\ntags: web前端\n---\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-02-13T17:54:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz4gf6be0000rcum5lpt8b71","content":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Markdown常用语法","date":"2016-05-05T18:49:31.000Z","_content":"\nMarkdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。\n常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。\n","source":"_posts/Markdown常用语法.md","raw":"---\ntitle: Markdown常用语法\ndate: 2016-05-6 02:49:31\ntags: web前端\n---\n\nMarkdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。\n常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。\n","slug":"Markdown常用语法","published":1,"updated":"2017-02-14T01:27:11.000Z","_id":"ciz4gf6bi0001rcum9svo8dqz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。<br>常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>\n","excerpt":"","more":"<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。<br>常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>\n"},{"title":"my new post","date":"2016-06-06T08:59:19.000Z","_content":"","source":"_posts/my-new-post.md","raw":"---\ntitle: my new post\ndate: 2016-06-06 16:59:19\ntags: 生活\n---\n","slug":"my-new-post","published":1,"updated":"2017-02-13T17:53:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz4gf6bn0003rcum525ib1f0","content":"","excerpt":"","more":""},{"title":"test","date":"2016-06-12T05:25:57.000Z","_content":"\n###  1. 块级作用域\n\n* **使用let代替var**\n\n```JavaScript\nif (true) {\n  let x = 'hello';\n}\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n```\n上面代码如果用var替代let，实际上就声明了一个全局变量，这显然不是本意。\n\n```JavaScript\nif(true) {\n  console.log(x); \n  let x = 'hello';\n}\n```\n上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。\n\n所以，建议不再使用var命令，而是使用let命令取代。\n\n* **全局常量和线程安全**\n\n在let和const中优先使用const，尤其是全局环境中不应使用变量，应该使用常量。\n所有的函数都应该设置为常量。\n\n### 2. 字符串\n\n```JavaScript\nconst a = 'foobar';\nconst b = `foo${a}bar`;\nconst c = 'foobar';\n```\n\n静态字符串使用单引号，动态字符串使用反引号。\n\n### 3. 解构赋值\n```JavaScript## \n\n> ***标题***\n\n ##\nconst arr = [1, 2, 3, 4];\n\n// bad\nconst first = arr[0];\nconst second = arr[1];\n\n// good\nconst [first, second] = arr;\n```\n使用数组成员对变量进行赋值的时候，优先使用解构赋值。\n\n```JavaScript\n// bad\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n\n// good\nfunction getFullName(obj) {\n  const { firstName, lastName } = obj;\n}\n\n// best\nfunction getFullName({ firstName, lastName }) {\n}\n```\n函数的参数如果是对象的成员，优先使用解构赋值。\n\n\n``` JavaScript\n// bad\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n\n// good\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\n\nconst { left, right } = processInput(input);\n```\n如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。\n\n### 4. 对象\n```JavaScript\n// bad\nconst obj = {};\nobj.x = 3;\n\n// if reshape unavoidable\nconst obj = {};\nObject.assign(obj, { x: 3 });\n\n// good\nconst obj = { x: null };\na.x = 3;\n```\n\n对象尽量静态化，一旦定义之后，最好不要随意添加新的属性，如果需要的话，使用Object.assgin方法。\n\nwaiting......\n属性表达式来动态定义属性。\n\n\n\n### 5. 数组\n\n```JavaScript\nconst foo = document.querySelectorAll('.foo');\nconst nodes = Array.from(foo);\n```\n使用Array.from方法，将类似数组的对象转为数组。\n粗体文本\n> *Tip.*  （...）为扩展运算符\n\n```JavaScript\n// bad\nconst len = items.length;\nconst itemsCopy = [];\nlet i;\n\nfor (i = 0; i < len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nconst itemsCopy = [...items];\n```\n使用扩展运算符（...）拷贝数组。","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2016-06-12 13:25:57\ntags: 随笔\n---\n\n###  1. 块级作用域\n\n* **使用let代替var**\n\n```JavaScript\nif (true) {\n  let x = 'hello';\n}\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n```\n上面代码如果用var替代let，实际上就声明了一个全局变量，这显然不是本意。\n\n```JavaScript\nif(true) {\n  console.log(x); \n  let x = 'hello';\n}\n```\n上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。\n\n所以，建议不再使用var命令，而是使用let命令取代。\n\n* **全局常量和线程安全**\n\n在let和const中优先使用const，尤其是全局环境中不应使用变量，应该使用常量。\n所有的函数都应该设置为常量。\n\n### 2. 字符串\n\n```JavaScript\nconst a = 'foobar';\nconst b = `foo${a}bar`;\nconst c = 'foobar';\n```\n\n静态字符串使用单引号，动态字符串使用反引号。\n\n### 3. 解构赋值\n```JavaScript## \n\n> ***标题***\n\n ##\nconst arr = [1, 2, 3, 4];\n\n// bad\nconst first = arr[0];\nconst second = arr[1];\n\n// good\nconst [first, second] = arr;\n```\n使用数组成员对变量进行赋值的时候，优先使用解构赋值。\n\n```JavaScript\n// bad\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n\n// good\nfunction getFullName(obj) {\n  const { firstName, lastName } = obj;\n}\n\n// best\nfunction getFullName({ firstName, lastName }) {\n}\n```\n函数的参数如果是对象的成员，优先使用解构赋值。\n\n\n``` JavaScript\n// bad\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n\n// good\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\n\nconst { left, right } = processInput(input);\n```\n如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。\n\n### 4. 对象\n```JavaScript\n// bad\nconst obj = {};\nobj.x = 3;\n\n// if reshape unavoidable\nconst obj = {};\nObject.assign(obj, { x: 3 });\n\n// good\nconst obj = { x: null };\na.x = 3;\n```\n\n对象尽量静态化，一旦定义之后，最好不要随意添加新的属性，如果需要的话，使用Object.assgin方法。\n\nwaiting......\n属性表达式来动态定义属性。\n\n\n\n### 5. 数组\n\n```JavaScript\nconst foo = document.querySelectorAll('.foo');\nconst nodes = Array.from(foo);\n```\n使用Array.from方法，将类似数组的对象转为数组。\n粗体文本\n> *Tip.*  （...）为扩展运算符\n\n```JavaScript\n// bad\nconst len = items.length;\nconst itemsCopy = [];\nlet i;\n\nfor (i = 0; i < len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nconst itemsCopy = [...items];\n```\n使用扩展运算符（...）拷贝数组。","slug":"test","published":1,"updated":"2017-02-13T18:17:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz4gf6bo0004rcumrot4kve4","content":"<h3 id=\"1-块级作用域\"><a href=\"#1-块级作用域\" class=\"headerlink\" title=\"1. 块级作用域\"></a>1. 块级作用域</h3><ul>\n<li><strong>使用let代替var</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"string\">'hello'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码如果用var替代let，实际上就声明了一个全局变量，这显然不是本意。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x); </div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"string\">'hello'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p>\n<p>所以，建议不再使用var命令，而是使用let命令取代。</p>\n<ul>\n<li><strong>全局常量和线程安全</strong></li>\n</ul>\n<p>在let和const中优先使用const，尤其是全局环境中不应使用变量，应该使用常量。<br>所有的函数都应该设置为常量。</p>\n<h3 id=\"2-字符串\"><a href=\"#2-字符串\" class=\"headerlink\" title=\"2. 字符串\"></a>2. 字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">'foobar'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">`foo<span class=\"subst\">$&#123;a&#125;</span>bar`</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">'foobar'</span>;</div></pre></td></tr></table></figure>\n<p>静态字符串使用单引号，动态字符串使用反引号。</p>\n<h3 id=\"3-解构赋值\"><a href=\"#3-解构赋值\" class=\"headerlink\" title=\"3. 解构赋值\"></a>3. 解构赋值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; ***标题***</div><div class=\"line\"></div><div class=\"line\"> ##</div><div class=\"line\">const arr = [1, 2, 3, 4];</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const first = arr[0];</div><div class=\"line\">const second = arr[1];</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const [first, second] = arr;</div></pre></td></tr></table></figure>\n<p>使用数组成员对变量进行赋值的时候，优先使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> firstName = user.firstName;</div><div class=\"line\">  <span class=\"keyword\">const</span> lastName = user.lastName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> &#123; firstName, lastName &#125; = obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// best</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123; firstName, lastName &#125;</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数的参数如果是对象的成员，优先使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [left, right, top, bottom];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; left, right, top, bottom &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure>\n<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p>\n<h3 id=\"4-对象\"><a href=\"#4-对象\" class=\"headerlink\" title=\"4. 对象\"></a>4. 对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</div><div class=\"line\">obj.x = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if reshape unavoidable</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">null</span> &#125;;</div><div class=\"line\">a.x = <span class=\"number\">3</span>;</div></pre></td></tr></table></figure>\n<p>对象尽量静态化，一旦定义之后，最好不要随意添加新的属性，如果需要的话，使用Object.assgin方法。</p>\n<p>waiting……<br>属性表达式来动态定义属性。</p>\n<h3 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5. 数组\"></a>5. 数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.foo'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> nodes = <span class=\"built_in\">Array</span>.from(foo);</div></pre></td></tr></table></figure>\n<p>使用Array.from方法，将类似数组的对象转为数组。<br>粗体文本</p>\n<blockquote>\n<p><em>Tip.</em>  （…）为扩展运算符</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> len = items.length;</div><div class=\"line\"><span class=\"keyword\">const</span> itemsCopy = [];</div><div class=\"line\"><span class=\"keyword\">let</span> i;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">  itemsCopy[i] = items[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure>\n<p>使用扩展运算符（…）拷贝数组。</p>\n","excerpt":"","more":"<h3 id=\"1-块级作用域\"><a href=\"#1-块级作用域\" class=\"headerlink\" title=\"1. 块级作用域\"></a>1. 块级作用域</h3><ul>\n<li><strong>使用let代替var</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"string\">'hello'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码如果用var替代let，实际上就声明了一个全局变量，这显然不是本意。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x); </div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"string\">'hello'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p>\n<p>所以，建议不再使用var命令，而是使用let命令取代。</p>\n<ul>\n<li><strong>全局常量和线程安全</strong></li>\n</ul>\n<p>在let和const中优先使用const，尤其是全局环境中不应使用变量，应该使用常量。<br>所有的函数都应该设置为常量。</p>\n<h3 id=\"2-字符串\"><a href=\"#2-字符串\" class=\"headerlink\" title=\"2. 字符串\"></a>2. 字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">'foobar'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">`foo<span class=\"subst\">$&#123;a&#125;</span>bar`</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">'foobar'</span>;</div></pre></td></tr></table></figure>\n<p>静态字符串使用单引号，动态字符串使用反引号。</p>\n<h3 id=\"3-解构赋值\"><a href=\"#3-解构赋值\" class=\"headerlink\" title=\"3. 解构赋值\"></a>3. 解构赋值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; ***标题***</div><div class=\"line\"></div><div class=\"line\"> ##</div><div class=\"line\">const arr = [1, 2, 3, 4];</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const first = arr[0];</div><div class=\"line\">const second = arr[1];</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const [first, second] = arr;</div></pre></td></tr></table></figure>\n<p>使用数组成员对变量进行赋值的时候，优先使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> firstName = user.firstName;</div><div class=\"line\">  <span class=\"keyword\">const</span> lastName = user.lastName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> &#123; firstName, lastName &#125; = obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// best</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123; firstName, lastName &#125;</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数的参数如果是对象的成员，优先使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [left, right, top, bottom];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; left, right, top, bottom &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure>\n<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p>\n<h3 id=\"4-对象\"><a href=\"#4-对象\" class=\"headerlink\" title=\"4. 对象\"></a>4. 对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</div><div class=\"line\">obj.x = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if reshape unavoidable</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">null</span> &#125;;</div><div class=\"line\">a.x = <span class=\"number\">3</span>;</div></pre></td></tr></table></figure>\n<p>对象尽量静态化，一旦定义之后，最好不要随意添加新的属性，如果需要的话，使用Object.assgin方法。</p>\n<p>waiting……<br>属性表达式来动态定义属性。</p>\n<h3 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5. 数组\"></a>5. 数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.foo'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> nodes = <span class=\"built_in\">Array</span>.from(foo);</div></pre></td></tr></table></figure>\n<p>使用Array.from方法，将类似数组的对象转为数组。<br>粗体文本</p>\n<blockquote>\n<p><em>Tip.</em>  （…）为扩展运算符</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> len = items.length;</div><div class=\"line\"><span class=\"keyword\">const</span> itemsCopy = [];</div><div class=\"line\"><span class=\"keyword\">let</span> i;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">  itemsCopy[i] = items[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure>\n<p>使用扩展运算符（…）拷贝数组。</p>\n"},{"title":"test2","date":"2016-06-12T05:28:05.000Z","_content":"","source":"_posts/test2.md","raw":"---\ntitle: test2\ndate: 2016-06-12 13:28:05\ntags:\n---\n","slug":"test2","published":1,"updated":"2017-02-13T17:50:21.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz4gf6br0005rcumin5vbj4h","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciz4gf6be0000rcum5lpt8b71","tag_id":"ciz4gf6bk0002rcumslgdrxlt","_id":"ciz4gf6bw0007rcumh8bwwznv"},{"post_id":"ciz4gf6bn0003rcum525ib1f0","tag_id":"ciz4gf6bu0006rcum3nusab0p","_id":"ciz4gf6bx0009rcum7h58h5mv"},{"post_id":"ciz4gf6bo0004rcumrot4kve4","tag_id":"ciz4gf6bw0008rcumrrlljeeh","_id":"ciz4gf6bx000arcumh8sskkpy"},{"post_id":"ciz4gf6bi0001rcum9svo8dqz","tag_id":"ciz4gf6bk0002rcumslgdrxlt","_id":"ciz509czl000094um85ivfdt8"}],"Tag":[{"name":"web前端","_id":"ciz4gf6bk0002rcumslgdrxlt"},{"name":"生活","_id":"ciz4gf6bu0006rcum3nusab0p"},{"name":"随笔","_id":"ciz4gf6bw0008rcumrrlljeeh"}]}}